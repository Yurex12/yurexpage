// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationStatus {
  READ
  UNREAD
}

enum NotificationType {
  LIKE_POST
  COMMENT
}

model User {
  id                     String         @id @default(cuid())
  name                   String?
  email                  String         @unique
  emailVerified          DateTime?
  bio                    String?
  image                  String?
  password               String
  notifications          Notification[] @relation("UserNotifications")
  triggeredNotifications Notification[] @relation("TriggeredNotifications")
  posts                  Post[]
  postLikes              PostLike[]
  postComments           Comment[]
  postImages             Image[]
  commentLikes           CommentLike[]

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id        String     @id @default(cuid())
  content   String     @db.Text
  userId    String
  comments  Comment[]
  postLikes PostLike[]
  images    Image[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id            String             @id @default(cuid())
  triggerUserId String
  content       String
  userId        String
  type          NotificationType
  status        NotificationStatus @default(UNREAD)

  user        User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  triggerUser User @relation("TriggeredNotifications", fields: [triggerUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([triggerUserId])
}

model Comment {
  id           String        @id @default(cuid())
  content      String        @db.Text
  postId       String
  userId       String
  commentLikes CommentLike[]

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model Image {
  id     String @id @default(cuid())
  url    String
  userId String
  postId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model PostLike {
  id     String @id @default(cuid())
  postId String
  userId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
  @@index([postId])
}

model CommentLike {
  id        String @id @default(cuid())
  commentId String
  userId    String

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId])
}
