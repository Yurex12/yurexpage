generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationStatus {
  READ
  UNREAD
}

enum NotificationType {
  LIKE_POST
  COMMENT
}

model User {
  id              String  @id
  name            String
  email           String
  emailVerified   Boolean @default(false)
  image           String?
  username        String  @db.VarChar(15)
  displayUsername String
  bio             String?

  notifications          Notification[] @relation("UserNotifications")
  triggeredNotifications Notification[] @relation("TriggeredNotifications")
  posts                  Post[]
  postLikes              PostLike[]
  postComments           Comment[]
  postImages             Image[]
  commentLikes           CommentLike[]

  sessions Session[]
  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email])
  @@unique([username])
  @@unique([displayUsername])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Post {
  id        String     @id @default(cuid())
  userId    String
  content   String?    @db.Text
  comments  Comment[]
  postLikes PostLike[]
  images    Image[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id            String             @id @default(cuid())
  triggerUserId String
  content       String
  userId        String
  type          NotificationType
  status        NotificationStatus @default(UNREAD)

  user        User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  triggerUser User @relation("TriggeredNotifications", fields: [triggerUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([triggerUserId])
}

model Comment {
  id           String        @id @default(cuid())
  content      String        @db.Text
  postId       String
  userId       String
  commentLikes CommentLike[]

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model Image {
  id     String @id @default(cuid())
  url    String
  name   String
  fileId String
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model PostLike {
  id     String @id @default(cuid())
  postId String
  userId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
  @@index([postId])
}

model CommentLike {
  id        String @id @default(cuid())
  commentId String
  userId    String

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId])
}
